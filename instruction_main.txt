1. pipenv install django
2. django-admin startproject quotesite
3. cd .\quotesite
python manage.py runserver
4. python manage.py startapp quotes
5. python manage.py startapp users
6. В кожному застосунку створюємо папку з templates
7. В кожній такій папці створимо однакові файли з шаблонами: base.html, index.html
8. Створимо в кожній папці guotes and users urls.py

В urls.py з guotes додаємо:
 from django.urls import path, include

from . import views

app_name = "quotes"

urlpatterns = [
    path('', views.main, name='root'),  
   
]

Це означає, що в шаблоні потрібно буде прописать тег: {% url 'quotes:root' %}

9. Йдемо в кореневі urls.py і додаємо там:
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('quotes.urls')),
    
]

10. Те саме робимо для users, дописуємо path('users/', include('users.urls'))

11. Йдемо у settings.py:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'quotes',
    'users',
]

12. Bootstrap берем линк и вставляем после meta

13. base.html копіюємо html з сайту

14. Створимо папку static для стилів, далі quotes далі style.css

15. Ми хочемо доєднати стилі, нам треба в base.html написати :
{% load static %}
    <link rel="stylesheet" href="{% static 'quotes/style.css' %}">

16. Создаю образ монго:
docker run -d -p 27017:27017 --name my-mongo-container mongo

17. Делаю контейнер, запускаю его и Монгокомпасс конектюсь к контейнеру

18. Створимо файл json_to_mongo, щоб автори в цитатах відображалась як index

19.pipenv install bson

20. pipenv install pymongo

21.json_to_mongo.py
import json
from bson.objectid import ObjectId
from pymongo import MongoClient

client = MongoClient('mongodb://localhost')

db = client.django

with open('utils/quotes.json', 'r', encoding='utf-8') as fd:
    quotes = json.load(fd)

for quote in quotes:
    author = db.authors.find_one({'fullname': quote['author']})
    if author:
        db.quotes.insert_one(
            {
                'tags': quote['tags'],
                'author': ObjectId(author['_id']),
                'quote': quote['quote'],
            }
        )

22. В папке quotes создадим файл utils.py который будет возвразать нашу базу данных монго
23. Идем во views и дописываем наш код, докидываем через контекст изменения в наш шаблон:

from django.shortcuts import render
from .utils import get_mongodb



def main(request):
    db = get_mongodb()
    quotes = db.quotes.find()
    return render(request, 'quotes/index.html', context={'quotes':quotes})

24. Идем в index.html вставляем туда все цитаты

25. Делаем папку tamplatestags а в ней extract.py
from bson.objectid import ObjectId

from django import template

from ..utils import get_mongodb

register = template.Library()


def get_author(id_):
    db = get_mongodb()
    author = db.authors.find_one({'_id': ObjectId(id_)})
    return author['fullname']


register.filter('author', get_author)


26. Идем в index.html и там дописываем код для этого

27. Делаем пагинацию, для єтого идем в файл views.py и вставляем рядок:
from django.core.paginator import Paginator
и добавляем аргумент в функцию page=1

28. Мы для второй страницы копируем html с пагинацией, для первой и третей

<ul class="pager">
            
            <li class="previous">
                <a href="/page/1/"><span aria-hidden="true">←</span> Previous</a>
            </li>
            
            
            <li class="next">
                <a href="/page/3/">Next <span aria-hidden="true">→</span></a>
            </li>
            
        </ul>


29. Переделываем views.py

from django.shortcuts import render
from .utils import get_mongodb
from django.core.paginator import Paginator


def main(request, page=1):
    db = get_mongodb()
    quotes = db.quotes.find()
    per_page = 10
    paginator = Paginator(list(quotes), per_page)
    quotes_on_page = paginator.page(page)
    return render(request, 'quotes/index.html', context={'quotes':quotes_on_page})

    Здесь мы добавили три рядка
    per_page = 10
    paginator = Paginator(list(quotes), per_page)
    quotes_on_page = paginator.page(page)

    и вместо context={'quotes':quotes} написали context={'quotes':quotes_on_page}


30. Добавляем path('<int:page>', views.main, name='root_paginate'), в urls.py

31. models.py делаем модели для создания базы данных в постгрес:

from django.db import models


class Author(models.Model):
    fullname = models.CharField(max_length=50)
    born_date = models.CharField(max_length=50)
    born_location = models.CharField(max_length=150)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    
class Tag(models.Model):
    name = models.CharField(max_length=50, null=False, unique=True)
   
class Quote(models.Model):
    quote = models.TextField()
    tags = models.ManyToManyField(Tag)
    author = models.ForeignKey(Author, on_delete=models.CASCADE, default=None, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    


Похоже, вы создали четвертую таблицу из-за отношения ManyToManyField между моделями Quote и Tag. Вот как это работает:

Quote: Эта модель представляет собой цитату, у которой может быть несколько тегов.
Tag: Эта модель представляет собой отдельный тег.
QuoteTagRelation: Эта дополнительная таблица создается автоматически Django для обработки отношений ManyToManyField. В ней хранятся связи между цитатами и тегами. Это стандартная практика для связей "многие ко многим" в Django.
Author: Это ваша третья таблица, представляющая автора цитаты.
Таким образом, когда вы определяете ManyToManyField между Quote и Tag, Django автоматически создает таблицу для управления этими связями, чтобы обеспечить корректное хранение и доступ к данным.

32. В папке utils создаем пайтон файл migration для наполнения данными наши таблички в постгрес
import os
import django

from pymongo import MongoClient

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'quotesite.settings')
django.setup()

from quotes.models import Author, Quote, Tag  # noqa


client = MongoClient('mongodb://localhost')
db = client.hw10

authors = db.authors.find()
for author in authors:
    Author.objects.get_or_create(
        fullname=author['fullname'],
        born_date=author['born_date'],
        born_location=author['born_location'],
        description=author['description']
    )
    
quotes = db.quotes.find()
for quote in quotes:
    tags = []
    for tag in quote['tags']: -хоть монго и возвращает список, но Джанго возвращает кортеж, мі вітягиваем только 1 єлемент
        t, *_ = Tag.objects.get_or_create(name=tag) 
        tags.append(t)
        
    exist_quote = bool(len(Quote.objects.filter(quote=quote['quote'])))
    if not exist_quote:
        author = db.authors.find_one({'_id': quote['author']})
        a = Author.objects.get(fullname=author['fullname'])
        q = Quote.objects.create(
            quote=quote['quote'],
            author=a
        )
        for tag in tags:
            q.tags.add(tag)

ЗАПУСКАЕМ НАШ ФАЙЛ НА ВЫПОЛНЕНИЕ:  py -m utils.migration

33. Начинаем работать над about
        1. Создадим author.html
        2. urls.py добавим путь 
         path('author/<str:author_id>', views.author_about, name='author'),
        3. в файле views.py пропишем функцию author_about:
        def author_about(request, author_id):
    db = get_mongodb()
    author = db.authors.find_one({'_id': ObjectId(author_id)})  # Використання ObjectId(author_id)
    return render(request, 'quotes/author.html', context={'author': author})

    4. В index.html заменим рядок <a href="{% url 'quotes:author' quote.author.id %}">(about)</a>
    5. В author.html напишем код:
    {% extends 'quotes/base.html' %}

{% block content %}
<div>
    <h3 class="author-title">{{ author.fullname }}</h3>
    <p><strong>Born:</strong> <span class="author-born-date">{{ author.born_date }}</span> <span class="author-born-location">{{ author.born_location }}</span></p>
    <p><strong>Description:</strong></p>
    <div class="author-description">
        {{ author.description }}
    </div>
    
  
</div>
{% endblock %}


и тут стоит сказать, что пришлось поменять в index.html на <a href="/author/{{quote.author}}">  (about)</a>


34. Работаем над тегами:
        1. Создадим файл tag.html
        2. urls добавим путь path('tag/<str:tag_name>/', views.quotes_by_tag, name='quotes_by_tag'),
        3. views напишем функцию quotes_by_tag

        def tag_page(request, tag_name):
    tag = Tag.objects.get(name=tag_name)
    quotes_with_tag = Quote.objects.filter(tags=tag)
    return render(request, 'quotes/tag.html', {'quotes_with_tag': quotes_with_tag, 'tag': tag})


        4. Напишем tag.html
        {% extends 'quotes/base.html' %}

{% block content %}
    <h3>Viewing tag: {{ tag.name }}</h3>
    {% for quote in quotes_with_tag %}
        <div class="quote">
            <p>{{ quote.quote }}</p>
            <p>by {{ quote.author.fullname }} <a href="/author_for_tag/{{quote.author.id}}">  (about)</a>



            <p>Tags:
                {% for tag in quote.tags.all %}
                <a class="tag" href="/tag/{{ tag.name }}">{{ tag.name }}</a>

                {% endfor %}
            </p>
        </div>
    {% endfor %}
{% endblock %}

35. Для того, чтобы при переходе по ссылке по about нам передавались авторы, надо создать еще одну страничку author_for_tag.html, потому что в файле index.html у нас возвращается id автора с базі монго 
а нам надо сейчас с базі постгрес
    1. urls.py:
    path('author_for_tag/<int:author_id>', views.author_for_tag, name='author_for_tag'),

    2. def author_for_tag(request, author_id):
    author = Author.objects.get(id=author_id)
    return render(request, 'quotes/author_for_tag.html', context={'author': author})


    3. author_for_tag.html
   {% extends 'quotes/base.html' %}

{% block content %}
<div>
    <h3 class="author-title">{{ author.fullname }}</h3>
    <p><strong>Born:</strong> <span class="author-born-date">{{ author.born_date }}</span> <span class="author-born-location">{{ author.born_location }}</span></p>
    <p><strong>Description:</strong></p>
    <div class="author-description">
        {{ author.description }}
    </div>
    
  
</div>
{% endblock %} 






